npm init -y for package.json
npm i express
npm i mongoose
npm i bcrypt jsonwebtoken 

Create models folder for database as user.js and views folder with index.ejs
npm i ejs

Basic cehck if server running or not=>
const express=require("express");
const app=express();
app.get("/", (req,res)=>{
    res.send("Hey");
})
app.listen(3000);


Ye project me users posts likh payege
User create karna hai
login and register
logout
Post creation
Post like
Post delete

User Schema Create in mongoose:
const mongoose=require("mongoose");
mongoose.connect("mongodb://127.0.0.1.27017/miniproject");

const userSchema = mongoose.Schema({
    username: String,
    name: String,
    age: Number,
    email: String,
    password: String
})

module.exports = mongoose.model("user",userSchema);

Then set view engine:
app.set("view engine","ejs");
app.use(express.json());
app.use(express.urlencoded({extended:true}));


Final code after this:
const express=require("express");
const app=express();
const userModel=require("./models/user")
const cookieParser=require("cookie-parser");

app.set("view engine","ejs");
app.use(express.json());
app.use(express.urlencoded({extended:true}));
app.use(cookieParser());

app.get("/", (req,res)=>{
    res.render("index");
})
app.post("/create")
app.listen(3000);

After that index.ejs for creating user:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div class="w-full min-h-screen bg-zinc-900 text-white p-10">
        <form action="/register" method="post">
            <h3 class="text-3xl mb-5">Create Account</h3>
            <input class="px-3 py-2 outline-none rounded-md bg-transparent border-2 border-zinc-800" type="text" placeholder="username" name="username">
            <input class="px-3 py-2 outline-none rounded-md bg-transparent border-2 border-zinc-800" type="text" placeholder="name" name="name">
            <input class="px-3 py-2 outline-none rounded-md bg-transparent border-2 border-zinc-800" type="number" placeholder="age" name="age">
            <input class="px-3 py-2 outline-none rounded-md bg-transparent border-2 border-zinc-800" type="email" placeholder="email" name="email">
            <input class="px-3 py-2 outline-none rounded-md bg-transparent border-2 border-zinc-800" type="text" placeholder="password" name="password">
            <input class="px-3 py-2 bg-blue-500  rounded-md"type="submit" placeholder="Create Account">
        </form>
    </div>
</body>
</html>


Now lets do registration so code before gensalt is:
app.post("/register",async (req,res)=>{
    let {email,password,username,name,age}=req.body;
    let user = await userModel.findOne({email});
    if(user) return res.send(500).send("User already registered");
})

Here we see the salt in the terminal:
app.post("/register",async (req,res)=>{
    let {email,password,username,name,age}=req.body;
    let user = await userModel.findOne({email});
    if(user) res.send(500).send("User already registered");
    bcrypt.genSalt(10, (err,salt)=>{
        console.log(salt);
    })
})


Final register:
app.post("/register",async (req,res)=>{
    let {email,password,username,name,age}=req.body;
    let user = await userModel.findOne({email});
    if(user) return res.status(500).send("User already registered");

    bcrypt.genSalt(10, (err,salt)=>{
        bcrypt.hash(password,salt, async (err,hash)=>{
            const user= await userModel.create({
                username,
                name,
                age,
                email,
                password:hash,

            }
            )
        })
    })
})

Updating user.js to include post:
const mongoose=require("mongoose");
mongoose.connect("mongodb://127.0.0.1:27017/miniproject");

const userSchema = mongoose.Schema({
    username: String,
    name: String,
    age: Number,
    email: String,
    password: String,
    posts: [
        {type: mongoose.Schema.Types.ObjectId, ref:"posts"}
    ]
})

module.exports= mongoose.model("user",userSchema);





Now let's make post schema as posts.js:
const mongoose=require("mongoose");
mongoose.connect("mongodb://127.0.0.1:27017/miniproject");

const postSchema = mongoose.Schema({
    user:{
        type: mongoose.Schema.Types.ObjectId,
        ref:"user"
    },
    date:{
        type: Date,
        default: Date.now
    },
    content:String,
    likes: [
        {type: mongoose.Schema.Types.ObjectId,ref:"user"}
    ],
    
})

module.exports= mongoose.model("post",postSchema);



To login the user lets use jwt now:
let token= jwt.sign({email:email, userid: user._id}, "shhhh"); after bcrypt.hash 

let token= jwt.sign({email:email, userid: user._id}, "shhhh");
        res.cookie("token",token);
        res.send("Registered");




Final register woll look like this:
app.post("/register",async (req,res)=>{
    let {email,password,username,name,age}=req.body;
    let user = await userModel.findOne({email});
    if(user) return res.status(500).send("User already registered");

    bcrypt.genSalt(10, (err,salt)=>{
        bcrypt.hash(password,salt, async (err,hash)=>{
            const user= await userModel.create({
                username,
                name,
                age,
                email,
                password:hash,

            })
            let token= jwt.sign({email:email, userid: user._id}, "shhhh");
            res.cookie("token",token);
            res.send("Registered");
    })
        

    })
})

Now lets do login by copy pasting register and do some changes there creating login.ejs and get post too!
app.post("/login",async (req,res)=>{
    let {email,password}=req.body;
    let user=await userModel.findOne({email});
    if(!user) return res.status(500).send("User not registered");
    bcrypt.compare(password, user.password, function(err,result){
        if(result) res.send("Logged In");
        else res.redirect("/login");
    })
})


and logout by clear the cookie
app.get("/logout", (req,res)=>{
    res.cookie("token","");
    res.redirect("/login");
})

now hum middleware lagayege ki login hai tabhi profile ka access milega:
function isLoggedIn(req,res,next){
    if(req.cookies.token==="") res.send("You have to login first");
    else{
        let data=jwt.verify(req.cookies.token, "shhhh");
        req.user=data;
    }
    next();
}

and funtion for /profile:
app.get("/profile",isLoggedIn, (req,res)=>{
    console.log(req.user); 
    res.render("login");
})

Noe first create the frontend part of profile.ejs 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div class="w-full min-h-screen bg-zinc-900 text-white p-10">
            <div class="w-full flex justify-end">
                <a class="bg-red-500 rounded-md px-3 py-2 text-sm inline-block mb-5" href="/logout">Logout</a>
            </div>
            <h3 class="text-3xl mb-5"><span class="font-light">Hello,</span>  <%= user.name %> ðŸ«¡</h3>
            <div>
                <h5 class="mb-5">You can create a post</h5>
                <form action="/post" method="post">
                    <textarea class="w-1/3 p-3 mb-2 block outline-none bg-transparent border-2 border-zinc-800" placeholder="What's on your mind" name="" id=""></textarea>
                    <input class="px-3 py-2 w-40 block bg-blue-500 rounded-md text-sm" type="submit" name="" id="" value="Create New Post">
                </form>
            </div>

            <div class="posts mt-20">
                <h3 class="text-zinc-400">Your Posts:</h3>
                <div class="postContainer mt-4">
                    <div class="post w-1/3 p-4 border-2 border-zinc-800 rounded-md bg-zinc-800 mb-5">
                        <h3 class="text-blue-500 mb-2">@username</h3>
                        <p class="text-sm tracking-tight">Lorem ipsum, dolor sit amet consectetur adipisicing elit. Mollitia quibusdam dignissimos voluptatum?</p>
                        <div class="btns flex gap-4">
                            <a class="mt-2 text-red-500" href="">Like </a>
                            <a class="mt-2 text-zinc-500" href="">Edit </a>
                        </div>
                    </div>
                </div>
            </div>
    </div>
</body>
</html>


Now lets create post
app.post("/post",isLoggedIn, async (req,res)=>{
    let user= await userModel.findOne({email: req.user.email});
    let {content}= req.body;
    let post= await postModel.create({
        user: user._id,
        content: content,
    });
    
    user.posts.push(post._id);
})

someupdates in profile populate as post is now a id:
app.get("/profile",isLoggedIn, async (req,res)=>{
    let user= await userModel.findOne({email: req.user.email});
    user.populate(posts);
    res.render("profile",{user});
})


Lets update the like button:
app.get("/like/:id",isLoggedIn, async (req,res)=>{
    let user= await psotModel.findOne({id: req.paramas.id}).populate("user");
    if(posts.likes.indexof(req.user.userid)===-1){
        posts.likes.push(req.user.userid);
    }
    else{
        posts.likes.splice((req.user.userid),1);
    }
    await post.save();
    res.redirect("/profile");
})

<a class="mt-2 text-red-500" href="/like/<%= post._id%>"><%= post.likes.indexOf(user._id)===-1 ? "Like" : "Unlike"%> </a>
